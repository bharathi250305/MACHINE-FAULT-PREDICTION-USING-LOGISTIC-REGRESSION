# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eq3rPdKmkDl1iww0zLBAhnT3vc7wtA9x
"""

import pandas as pd
import numpy as np

# Create synthetic dataset
np.random.seed(42)
temperature = np.random.randint(30, 90, 50)
vibration = np.random.uniform(2, 10, 50)

# Define rule for labeling
fault = []
for t, v in zip(temperature, vibration):
    if t > 60 or v > 7:
        fault.append(1)   # Fault condition
    else:
        fault.append(0)   # Normal

# Create DataFrame
df = pd.DataFrame({
    'Temperature': temperature,
    'Vibration': vibration,
    'Fault': fault
})

print(df.head())

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix

# Split into input and output
X = df[['Temperature', 'Vibration']]
y = df['Fault']

# Split train-test data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

while True:
    t = float(input("Enter temperature (°C): "))
    v = float(input("Enter vibration (mm/s): "))
    pred = model.predict([[t, v]])[0]
    if pred == 1:
        print("⚠️ Machine in FAULT condition\n")
    else:
        print("✅ Machine operating normally\n")